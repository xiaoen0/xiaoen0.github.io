<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>VSCode下进行Markdown环境搭建</title>
    <url>/posts/54b0646e.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  &emsp;集众程序猿所爱的VSCode写起Markdown文档来，风格很酷盖~</p>
<a id="more"></a>
<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="下载VSCode并安装"><a href="#下载VSCode并安装" class="headerlink" title="下载VSCode并安装"></a>下载VSCode并安装</h3><p><a href="https://code.visualstudio.com/">下载VSCode</a>，傻瓜式安装。</p>
<h3 id="VSCode里安装插件"><a href="#VSCode里安装插件" class="headerlink" title="VSCode里安装插件"></a>VSCode里安装插件</h3><p>&emsp;在此安装的插件:  </p>
<ul>
<li><u>Markdown All in One</u>:&ensp;Markdown语言支持。 </li>
<li><u>markdownlint</u>:&ensp;Markdown写作规范。</li>
<li><u>Prettier</u>:&ensp;格式错误自动修复。</li>
<li><u>Markdown Preview Enhanced</u>:&ensp;将原生Markdown预览的黑色背景改成白色。</li>
<li><u>Markdown Preview Github Styling</u>:&ensp;Github风格的预览。</li>
<li><u>Paste Image</u>:&ensp;从剪切板里粘贴图片到Markdown里。快捷键为Ctrl+Alt+V。</li>
<li><u>Markdown PDF</u>:&ensp;以PDF或图片的形式导出Markdown。</li>
</ul>
<h2 id="一些细节展示"><a href="#一些细节展示" class="headerlink" title="一些细节展示"></a>一些细节展示</h2><h3 id="Paste-Image的配置"><a href="#Paste-Image的配置" class="headerlink" title="Paste Image的配置"></a>Paste Image的配置</h3><p><img src="/images/image-20210131205254830.png" alt="image-20210131205254830"></p>
<p><img src="/images/image-20210131205352781.png" alt="image-20210131205352781"></p>
<p><img src="/images/image-20210131205421973.png" alt="image-20210131205421973"></p>
<p><img src="/images/image-20210131205452179.png" alt="image-20210131205452179"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&emsp;如果追求风格酷盖，VSCode写Markdown是个不错的选择；如果追求简单快捷，还是Typora优秀。</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo:NexT主题个性化配置</title>
    <url>/posts/1493449015.html</url>
    <content><![CDATA[<h3 id="背景使用彩带渲染"><a href="#背景使用彩带渲染" class="headerlink" title="背景使用彩带渲染"></a>背景使用彩带渲染</h3><!--<mark style = "background-color:#CDCDC1">主题配置文件</mark>-->
<p>在主题配置文件中，进行如下修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Canvas-ribbon</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-ribbon</span></span><br><span class="line"><span class="comment"># size: The width of the ribbon.</span></span><br><span class="line"><span class="comment"># alpha: The transparency of the ribbon.</span></span><br><span class="line"><span class="comment"># zIndex: The display level of the ribbon.</span></span><br><span class="line">canvas_ribbon:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">vendors:</span><br><span class="line">  <span class="comment"># Internal version: 1.0.0</span></span><br><span class="line">  <span class="comment"># See: https://github.com/zproo/canvas-ribbon</span></span><br><span class="line">  <span class="comment"># Example:</span></span><br><span class="line">  canvas_ribbon: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-ribbon@1/canvas-ribbon.js</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="链接持久化"><a href="#链接持久化" class="headerlink" title="链接持久化"></a>链接持久化</h3><p>Hexo默认的链接是http: //xxx(yourDomainName)/year/month/day/title 这种类型的。<br>这种默认的链接存在很多潜在的问题，比如：</p>
<ul>
<li>文章的title一般为中文，带有中文的url不利于SEO（搜索引擎优化）</li>
<li>如果对文章的title进行了修改，会导致链接发生变化，不利于文章的推广</li>
</ul>
<p>基于默认链接存在的潜在问题，我们最好把标题转成唯一的英文或数字字符串。配置如下：</p>
<p>1、安装插件hexo-abbrlink</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>2、在站点配置文件中添加abbrlink，并修改permalink</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">permalink: posts/:abbrlink/</span><br><span class="line"></span><br><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line">  rep: dec    <span class="comment">#support dec(default) and hex</span></span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>alg：算法。有crc16和crc32两种。</li>
<li>rep：进制。有dec(十进制)和hex(十六进制)两种。</li>
</ul>
<p>注：<br>crc16算法下的十进制编码最大为65535，这对个人博客来说已足够用。</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo:在Typora中插图片的正确打开方式</title>
    <url>/posts/5e01ee03.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    在Typora中插入图片的方式非常简单，只需指定好路径就ok了~</p>
<a id="more"></a>

<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="建存储图片的文件夹"><a href="#建存储图片的文件夹" class="headerlink" title="建存储图片的文件夹"></a>建存储图片的文件夹</h3><p>​    在Hexo站点中的source目录下，建一个存储图片的文件夹，命名为images</p>
<h3 id="配置根目录"><a href="#配置根目录" class="headerlink" title="配置根目录"></a>配置根目录</h3><p>​    在待插图片的md文档头部的配置项中，添加 typora-root-url: ../</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo:在Typora中插图片的正确打开方式</span><br><span class="line">tags:</span><br><span class="line">	- Hexo</span><br><span class="line">	- Typora</span><br><span class="line">categories:</span><br><span class="line">	-- 计算机</span><br><span class="line">	 - 环境</span><br><span class="line">date: 2021-01-31 21:15:10</span><br><span class="line">typora-root-url: ../</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>配置后，根目录为md文档所在目录的上一级目录，即source目录。</p>
<h3 id="拖入图片并修改图片的url"><a href="#拖入图片并修改图片的url" class="headerlink" title="拖入图片并修改图片的url"></a>拖入图片并修改图片的url</h3><p>​    拖入图片，默认的url是本地的绝对路径。这时，点击图片右键 ——&gt; “复制图片到…”，选择source/images文件即可。</p>
<p>​    图片的url会随之变成相应的相对路径。</p>
<p>​    插入图片成功~</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​    md文档中插入的图片能在Hexo站点中指定的路径中找到，当部署到github上时，博客中的图片自然也能正常被引用和显示。</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>09(简单)：用两个栈实现队列</title>
    <url>/posts/c19aac04.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>09：<a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof">用两个栈实现队列</a></p>
<blockquote>
<p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p>
</blockquote>
<p>示例1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[<span class="string">&quot;CQueue&quot;</span>,<span class="string">&quot;appendTail&quot;</span>,<span class="string">&quot;deleteHead&quot;</span>,<span class="string">&quot;deleteHead&quot;</span>]</span><br><span class="line">[[],[<span class="number">3</span>],[],[]]</span><br><span class="line">输出：[<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">3</span>,-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>示例2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[<span class="string">&quot;CQueue&quot;</span>,<span class="string">&quot;deleteHead&quot;</span>,<span class="string">&quot;appendTail&quot;</span>,<span class="string">&quot;appendTail&quot;</span>,<span class="string">&quot;deleteHead&quot;</span>,<span class="string">&quot;deleteHead&quot;</span>]</span><br><span class="line">[[],[],[<span class="number">5</span>],[<span class="number">2</span>],[],[]]</span><br><span class="line">输出：[<span class="keyword">null</span>,-<span class="number">1</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">5</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="方案1：暴力破解"><a href="#方案1：暴力破解" class="headerlink" title="方案1：暴力破解"></a>方案1：暴力破解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CQueue</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明两个栈</span></span><br><span class="line">	<span class="keyword">private</span> Stack&lt;Integer&gt; stack1;</span><br><span class="line">	<span class="keyword">private</span> Stack&lt;Integer&gt; stack2;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//实例化栈</span></span><br><span class="line">    	stack1 = <span class="keyword">new</span> Stack&lt;&gt;();	<span class="comment">//用于入队</span></span><br><span class="line">    	stack2 = <span class="keyword">new</span> Stack&lt;&gt;();	<span class="comment">//用于出队</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">while</span>(!stack2.isEmpty()) &#123;<span class="comment">//当栈2不空时，元素搬回栈1，直到搬完</span></span><br><span class="line">    		stack1.push(stack2.pop());</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	stack1.push(value);	<span class="comment">//栈2为空，元素入队</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">while</span>(!stack1.isEmpty()) &#123;<span class="comment">//当栈1不空，元素搬入栈2，直到搬完</span></span><br><span class="line">    		stack2.push(stack1.pop());</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">if</span>(stack2.isEmpty()) &#123;<span class="comment">//无元素可出队</span></span><br><span class="line">    		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> stack2.pop();	<span class="comment">//有元素可出队</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方案2：算法优化"><a href="#方案2：算法优化" class="headerlink" title="方案2：算法优化"></a>方案2：算法优化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CQueue</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明两个栈</span></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack1;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//实例化栈</span></span><br><span class="line">    	stack1 = <span class="keyword">new</span> Stack&lt;&gt;();	<span class="comment">//用于入队</span></span><br><span class="line">    	stack2 = <span class="keyword">new</span> Stack&lt;&gt;();	<span class="comment">//用于出队</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    	</span><br><span class="line">    	stack1.push(value);	<span class="comment">//元素直接入队即可</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(stack2.isEmpty()) &#123;<span class="comment">//栈2为空，从栈1中搬入元素，直到搬完</span></span><br><span class="line">    		<span class="keyword">while</span>(!stack1.isEmpty()) &#123;</span><br><span class="line">    			stack2.push(stack1.pop());</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">if</span>(stack2.isEmpty()) &#123;<span class="comment">//栈1中元素搬完之后，栈2还为空，则无元素可出队</span></span><br><span class="line">    		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    	&#125;<span class="keyword">else</span> &#123;<span class="comment">//栈1中元素办完之后，栈2不空了，则元素直接出队</span></span><br><span class="line">    		<span class="keyword">return</span> stack2.pop();</span><br><span class="line">    	&#125;  	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h2><h3 id="创建栈"><a href="#创建栈" class="headerlink" title="创建栈"></a>创建栈</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br></pre></td></tr></table></figure>
<h3 id="两个算法的时间复杂度"><a href="#两个算法的时间复杂度" class="headerlink" title="两个算法的时间复杂度"></a>两个算法的时间复杂度</h3><blockquote>
<p>方案1:</p>
<p>入队时间复杂度为O(n)</p>
<p>出队时间复杂度为O(n)</p>
</blockquote>
<blockquote>
<p>方案2:</p>
<p>入队时间复杂度为O(1)</p>
<p>出队时间复杂度为O(n)</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机</category>
        <category>《剑指offer》（第2版）</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>《剑指offer》（第2版）</tag>
        <tag>栈</tag>
        <tag>简单</tag>
      </tags>
  </entry>
</search>
